---
title: "An√°lisis Genomas: E. coli"
author: "OMICs Analysis"
format: 
  html:
    toc: true
    toc-depth: 3
    theme: yeti
    toc-location: left-body
    smooth-scroll: true
    toc-title: "Contenido"
editor: visual
execute:
  engine: knitr
lang: es
---

![](images/logo_OAN_for_white.png){fig-align="center" width="300"}

# Introducci√≥n

Vamos a trabajar con ensambles de distintas cepas de E. coli hospedero Bovino.

**NOTA** ‚ö†Ô∏èüëÅÔ∏è‚Äçüó®Ô∏è: Para las figuras del curso se utilizaron todos los 110 genomas con hospedero Bovino. Para este tutorial generaremos un subconjunto de 15, ya incluidos genomas de referencia para patotipos EHEC y EPEC.

Para iniciar vamos a descargar los datos disponibles que existan usando `datasets` de NCBI, lo puedes instalar [aqu√≠](https://github.com/ncbi/datasets).

Con el siguiente c√≥digo vamos a descargar los genomas depositados en NCBI de *E. coli*

```{bash, eval=FALSE}
mkdir 1_data
cd 1_data

datasets \
summary genome taxon '562' \
--assembly-level complete\
--assembly-source refseq \
--as-json-lines > Escherichia_coli_562.json
```

```{bash, eval=FALSE}
dataformat tsv genome \
--inputfile Escherichia_coli_562.json > Escherichia_coli_562.tsv
```

Este conjunto de metadatos `Escherichia_coli_562.tsv` nos servir√° para seleccionar los ensambles de genoma que necesitamos, este archivo cuenta con `58533` filas y `174` columnas.

Por ello es necesario utilizar la plataforma o m√©todo que m√°s prefieras, y quedarnos con un conjunto m√°s peque√±o de genomas para descargar.

En este tutorial haremos un ejemplo de parseo de datos con `R`.

```{r, message=FALSE, eval=FALSE}
#| code-fold: true
#| code-summary: "subsetting.R"

raw_tsv <- readr::read_tsv("0_data/Escherichia_coli_562.tsv")
dim(raw_tsv)


# Change colnames
colnames(raw_tsv) <- gsub(" ", ".", colnames(raw_tsv))

cols <- c("Assembly.BioSample.Accession", "Assembly.BioSample.Attribute.Name",
          "Assembly.BioSample.Attribute.Value", "Assembly.BioSample.Collected.by",
          "Assembly.BioSample.Collection.date", "Assembly.BioSample.Description.Comment",
          "Assembly.BioSample.Description.Organism.Name", "Assembly.BioSample.Description.Organism.Taxonomic.ID",
          "Assembly.BioSample.Description.Title", "Assembly.BioSample.Geographic.location",
          "Assembly.BioSample.Host", "Assembly.BioSample.Host.disease",
          "Assembly.BioSample.Isolation.source", "Assembly.BioSample.Last.updated",
          "Assembly.BioSample.Latitude./.Longitude", "Assembly.BioSample.Serovar",
          "Assembly.BioSample.Owner.Name", "Assembly.BioSample.Strain"
          
)



Refseq_for_taxon<- raw_tsv |>
  dplyr::select('Assembly.Accession',"Assembly.Level",
         'Organism.Name', starts_with('ANI'),starts_with('CheckM'), 
         cols,
         "Assembly.BioProject.Accession") |>
  dplyr::filter(ANI.Best.ANI.match.Organism == "Escherichia coli") |>
  dplyr::filter(grepl("GCF",Assembly.Accession)) |>
  dplyr::distinct()

colnames(Refseq_for_taxon) <- stringr::str_replace(colnames(Refseq_for_taxon), 
                                                   pattern = "Assembly.BioSample.",
                                                   replacement = "")

library(dplyr)


# Create the column 'Assembly.Biosample.Attribute' by combining the values and eliminating duplicates.
ecoli_df <- Refseq_for_taxon |>
  dplyr::group_by(Assembly.Accession) %>%
  summarise(
    Attribute = paste0(
      Attribute.Name, " : ", 
      Attribute.Value, 
      collapse = "; "
    ),
    .groups = "drop"
  ) %>%
  left_join(
    Refseq_for_taxon %>% 
      select(-Attribute.Name, -Attribute.Value) %>% 
      distinct(Assembly.Accession, .keep_all = TRUE),
    by = "Assembly.Accession"
  )


ecoli_subset <- ecoli_df %>% 
  select(where(~ n_distinct(.) > 1)) %>% 
  select(where(~ !all(is.na(.)))) %>% 
  filter(
    !is.na(CheckM.completeness),
    !is.na(Collection.date),
    !is.na(Host)
  )


ecoli_subset <- ecoli_subset %>% 
  mutate(find = CheckM.completeness >= 90 & CheckM.contamination < 5 & ANI.Best.ANI.match.ANI >= 96)


ecoli_subset <- ecoli_subset %>% 
  select(where(~ n_distinct(.) > 1)) %>% 
  select(where(~ !all(is.na(.)))) %>% 
  filter(
    !is.na(CheckM.completeness),
    !is.na(Collection.date),
    !is.na(Host)
  )


ecoli_subset$Host <- tolower(ecoli_subset$Host)

table(ecoli_subset$Host)

ecoli_subset2 <- ecoli_subset[ecoli_subset$Host == "bovine",]

ecoli_subset2$Geographic.location <- tolower(ecoli_subset2$Geographic.location)

ecoli_subset2[stringr::str_detect(ecoli_subset2$Geographic.location, pattern = "china"),
              "Geographic.location"] <- "china"

ecoli_subset2[stringr::str_detect(ecoli_subset2$Geographic.location, pattern = "usa"),
              "Geographic.location"] <- "usa"

ecoli_subset2 <- ecoli_subset2[ecoli_subset2$Geographic.location != "missing",]

# Quiero quedarme al azar con 4 de china y 4 de usa, y conservar a francia y suiza

ecoli_bovine <- ecoli_subset2 %>% 
  group_by(Geographic.location) %>% 
  slice_sample(n = 4) %>% 
  ungroup() %>% 
  select(Assembly.Accession, Strain, Geographic.location,
         Host, Owner.Name, Assembly.BioProject.Accession)

readr::write_tsv(ecoli_bovine, "0_data/Ecoli_bovineHost.tsv")

table(ecoli_subset2$Geographic.location)
```

En este tutorial este ser√° el archivo con el que trabajaremos `Ecoli_bovineHost.tsv`:

```{r, echo=FALSE, message=FALSE}

df <- readr::read_tsv("tables/Ecoli_bovineHost.tsv")

gt::gt(df)
```

### Descarga de archivos

Para descargar los archivos vamos a utilizar el siguiente c√≥digo:

```{bash, eval=FALSE}
for g in $(cut -f1 Ecoli_bovineHost.tsv | awk 'NR > 1'); do
        if [ -f $g.zip ]; then
            echo $g'.zip exists';
        else
            datasets download genome accession $g \ 
            --include genome --filename $g'.zip';
            sleep 2;
        fi
    done
```

Descomprimir los archivos

```{bash, eval=FALSE}
for g in $(cut -f1 Ecoli_bovineHost.tsv | awk 'NR > 1'); do
        unzip $g.zip -d $g;
        mv $g/ncbi_dataset/data/$g/*.fna $g.fna;
        rm -r $g/;
done

rm *.zip
```

Con esto ya contamos con un sub conjunto de datos listo para trabajar.

# Control de Calidad

## FastANI

## CheckM

## BUSCO

# Anotaci√≥n de genomas

## Prokka

`Prokka` es un anotador de genomas para organismos procariontes, lo puedes descargar de [aqu√≠](https://github.com/tseemann/prokka).

```{bash, eval=FALSE}
genomes=$( ls $HOME/1_data/*.fna )

for g in $genomes; do
 prokka \
 $g \
 --cpus 6 \
 --outdir prokka/${id%.fna} \
 --genus Escherichia
done
 
```

## Bakta

Bakta es uno de los anotadores de genomas "m√°s" completos ya que usa distintas bases, utiliza a `DIAMOND` de alineador. Lo puedes descargar [aqu√≠](https://github.com/oschwengers/bakta). Es necesario descargar la base de datos para poder ejecutarlo, para este ejemplo se guard√≥ en el directorio `$HOME/db`

**Precauci√≥n** ‚ö†Ô∏è: Necesitas 8GB de RAM, disponibilidad de tiempo y memoria en tu m√°quina, con m√°s de 10 genomas podr√≠a demorar seg√∫n la capacidad de nucleos que tengas. Para este tutorial solo te mostraremos como es el c√≥digo pero no se utilizar√° este paso para los siguientes an√°lisis.

```{bash, eval=FALSE}
source $HOME/bin/bakta-env/bin/activate
```

```{bash, eval=FALSE}
#| code-fold: true
#| code-summary: "Muestra el c√≥digo"
genomes=$(ls $HOME/1_data)

experiment_file="$HOME/Experiment_Design.tsv"


for g in $genomes; do
    id=$(basename "$g" | awk -F'/' '{print $NF}' | sed 's/.fna$//')

    strain=$(awk -F'\t' -v id="$id" '$1 == id {print $3}' "$experiment_file")

    bakta \
    --db $HOME/db \
    --output $HOME/2_annotation/bakta/${id} \
    --genus Escherichia \
    --strain "$strain" \
    --threads 6 \
    --force $HOME/1_data/${g}
done
```

## AMRfinder

```{bash, eval=FALSE}

workdir=$HOME/2_annotation/prokka
output_dir=$HOME/2_annotation/AMR

for dir in $workdir/*; do
  if [ -d "$dir" ]; then
      sample=$(basename "$dir")
      protein=$dir/$sample.faa
      dna=$dir/$sample.fna
      gff=$dir/$sample.gff3

  temp_gff="${output_dir}/amrfinder_${sample}.gff"
		perl -pe '/^##FASTA/ && exit; s/(\W)Name=/$1OldName=/i; s/ID=([^;]+)/ID=$1;Name=$1/' $gff > $temp_gff

      amrfinder \
      -p $protein \
      -n $dna \
      -g $temp_gff \
      --plus --organism Escherichia \
      -o $output_dir/${sample}_amrfinder.tsv \
      --threads 6
done
```

## Virulence Factor DataBase

## 

# Pangenoma

Vamos a utilizar Roary, lo puedes descargar [aqu√≠](https://github.com/sanger-pathogens/Roary).

Preparamos los archivos `.gff` obtenidos de la anotaci√≥n con `Prokka` o `Bakta` para poder realizar el an√°lisis de pangenoma.

```{bash, eval=FALSE}
DIR_ORIGEN="$HOME/2025_Demo_ecoli/2_annotation/prokka"
DIR_DESTINO="$HOME/2025_Demo_ecoli/3_pangenome/data_genomes"
for carpeta in "$DIR_ORIGEN"/*; do
        if [[ -d "$carpeta" ]]; then
            nombre_carpeta=$(basename "$carpeta")

            # Buscar el primer archivo .gff o .gff3 en la carpeta 
            archivo_gff=$(find "$carpeta" -maxdepth 1 -type f \( -iname "*.gff" -o -iname "*.gff3" \) -print -quit || true)

            if [[ -n "$archivo_gff" ]]; then
                destino="$DIR_DESTINO/${nombre_carpeta}.gff"
                cp -f -- "$archivo_gff" "$destino"
                echo "Archivo $archivo_gff copiado como $destino"
            else
                echo "No se encontr√≥ archivo .gff/.gff3 en $carpeta"
            fi
        fi
    done
```

```{bash, eval=FALSE}
DIR_ORIGEN="$HOME/OMICS/2025_Demo_ecoli/2_annotation/prokka"
DIR_DESTINO="$HOME/2025_Demo_ecoli/3_pangenome/data_genomes"

roary -f "$OUTDIR" \
-e \
-p 8 \
-v "$DIR_DESTINO/pangenome_prokka_prank"/*.gff
```

# Filog√©nia 
